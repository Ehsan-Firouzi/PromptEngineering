**KeyStore Operations**
1-1 - Detect all instances of KeyStore operations, specifically load, store, setKeyEntry, and getKey operations. Store each instance corresponding to these operations in variables as L1, L2, ..., Li for load; S1, S2, ..., Si for store; K1, K2, ..., Ki for setKeyEntry; and G1, G2, ..., Gi for getKey. Store the total number of detected instances for each category in NL, NS, NK, and NG respectively.
1-2 - For each KeyStore load operation (L1, L2, ..., Li):
1-2-1 - Track how the KeyStore password is assigned. Detect any conditional branches or assignments that might alter the password.
1-2-2 - Determine the final value of the KeyStore password after evaluating all conditions.
1-2-3 - If the password is hardcoded, set HL1 to "Insecure: Hardcoded KeyStore password".
1-2-4 - Else, set HL1 to "KeyStore password OK".
1-3 - For each KeyStore store operation (S1, S2, ..., Si):
1-3-1 - Track how the KeyStore password is assigned. Detect any conditional branches or assignments that might alter the password.
1-3-2 - Determine the final value of the KeyStore password after evaluating all conditions.
1-3-3 - If the password is hardcoded, set HS1 to "Insecure: Hardcoded KeyStore password".
1-3-4 - Else, set HS1 to "KeyStore password OK".
1-4 - For each KeyStore setKeyEntry operation (K1, K2, ..., Ki):
1-4-1 - Track how the key entry password is assigned. Detect any conditional branches or assignments that might alter the password.
1-4-2 - Determine the final value of the key entry password after evaluating all conditions.
1-4-3 - If the password is hardcoded, set HK1 to "Insecure: Hardcoded Key Entry password".
1-4-4 - Else, set HK1 to "Key Entry password OK".
1-5 - For each KeyStore getKey operation (G1, G2, ..., Gi):
1-5-1 - Track how the key retrieval password is assigned. Detect any conditional branches or assignments that might alter the password.
1-5-2 - Determine the final value of the key retrieval password after evaluating all conditions.
1-5-3 - If the password is hardcoded, set HG1 to "Insecure: Hardcoded Key Retrieval password".
1-5-4 - Else, set HG1 to "Key Retrieval password OK".
1-6 - If multiple KeyStore load or store operations are detected, determine which one is used in the main function and store its index in UC, if applicable.

Output:

Combine the calculated values into a structured response like provided in triple quotes. Do all steps. Just include the following format in your response (don't include any additional details or explanation):
"""
KeyStore Operations:
Number of load operations=[NL], Number of store operations=[NS], Number of setKeyEntry operations=[NK], Number of getKey operations=[NG],
Load Operations Statuses={(L1: {Final Password Value=[password_L1], Password Status=[HL1]}, (L2: {Final Password Value=[password_L2], Password Status=[HL2]}, ... (Li: {Final Password Value=[password_Li], Password Status=[HLi]})},
Store Operations Statuses={(S1: {Final Password Value=[password_S1], Password Status=[HS1]}, (S2: {Final Password Value=[password_S2], Password Status=[HS2]}, ... (Si: {Final Password Value=[password_Si], Password Status=[HSi]})},
SetKeyEntry Operations Statuses={(K1: {Final Password Value=[password_K1], Password Status=[HK1]}, (K2: {Final Password Value=[password_K2], Password Status=[HK2]}, ... (Ki: {Final Password Value=[password_Ki], Password Status=[HKi]})},
GetKey Operations Statuses={(G1: {Final Password Value=[password_G1], Password Status=[HG1]}, (G2: {Final Password Value=[password_G2], Password Status=[HG2]}, ... (Gi: {Final Password Value=[password_Gi], Password Status=[HGi]})},
KeyStore operation used in main= [UC]
"""
